/** @mainpage dlibs library
 *
 * Tools to have a simple way of programming life.
 *
 * @section intro Introduction
 *
 * Some of the functionality provide includes :
 *
 * - Writing logs with the log libraries : An already build-in factory
 * ( DLogger ) with :
 *   - a file log engine : DLogEngineFile
 *   - a socket log engine DLogEngineSocket
 *   - a syslog log engine : DLogEngineSyslog
 *   - a database log engine : DLogEngineDatabase
 *   - an standart output (stdout) log engine : DLogEngineStdout
 *
 * - Settings file operation (XML format) with the DSettings library.
 *
 * - Sockets functions with The DSock library :
 *   client part with DClientSock and server part with DServerSock.
 *
 * - String operations with the DString library.
 *
 * - Manage points and rectangle with DPoint and rectangle with DRect libraries.
 *
 * - Database operations with the DDatabase factory library DSQLite and
 * optionnaly DMySQL, DPgSQL.
 *
 * - Manage URL with the DURL library
 *
 * - Send email by the DSMTP library
 *
 * - Use exception with DException
 *
 * - A class to manage events : DBasicEvent
 *
 * - A template factory engine : DFactory
 *
 * - A template singleton : DSingleton
 *
 * - A class to manage thread process : DThread
 *
 * - A template observer-observable pair : DObserver and DObservable
 *
 * - A timer : DTimer
 *
 * - Parse command line arguments with the DAppCmdLine ( DAppOption and DAppArg )
 *
 * @section build Build library
 *
 * By default, only dynamic library will be built. In order to get a static one,
 * add the following option to the configure script.
 *
 *   --enable-static
 *
 * You can specifie the install folder (/usr/local by default)
 *
 *   --prefix=/usr
 *
 * After the install process, you can rediscover the prefix by the 'dlibspath --prefix'
 * command line ( in a terminal or directly in the cmake or autotools )
 *
 * @section howto Howto to use it
 *
 * You just need to include the all in one header file.\n
 *
 * @code
 * #include <dlibs/dlibs.h>
 * @endcode
 *
 * or add the header files directory to the cpp flags and include file in
 * your code like this :
 * @code
 * -I/usr/local/dlibs
 * @endcode
 * In this example, the prefix path ( /usr/local ) can be found with the
 * 'dlibspath --prefix' command line
 * @code
 * #include <dlibs.h>
 * @endcode
 *
 * And for linking your application against the dlibss library, just add this
 * option into your Makefile :
 *
 * @code
 * -L/usr/local/libs -ldlibs
 * @endcode
 *
 * @section supports Supported Platforms
 * The application has been successfully built on the following platforms:
 *
 *   - Linux (x86, x86_64) : on debian and gentoo.
 *
 * @section depends Dependencies
 *
 * This library depends on several other open source packages.These must
 * be installed before libraries can be installed
 * ( Don't forget the devel packages) :
 *
 * - pthread (The lib use threads)
 * - libxml2 (XML API)
 * - librt (real time)
 * - libmysql (DB operations) : optionnal
 * - libpq (DB operations) : optionnal
 *
 * @note
 * SQLite is not necessary to build DLibs because a embedded version is
 * present in package source.
 *
 * @section license Licensing
 *
 * The libraries are licensed under GNU/GPL v3 license. See the COPYING file.
 *
 * @section TODO
 * In documentation :
 *
 * - DRect::Apex
 *
 * - DSMTP::Data
 *
 * - Check include example
 *
 * - No brief for class
 *
 * @image html logo.png
 *
 */
