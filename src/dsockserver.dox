/******************************************************************************
 * Unit Test for DSocket class, server part                                   *
 ******************************************************************************/
#include <iostream>
#include <cstdlib>
#include <signal.h>

#include "dlibs.h"
#define PORT 12345

using namespace std;

bool loop = true;

void sighandler( int signum )
{
   cout << "Caught signal" << signum << endl;
   loop = false;
}

int main( int argc, char **argv )
{
	DServerSock server;
	int hSock = -1;
	DString buffer;
	DURL url;
	int port = 0;
	
	signal( SIGTERM, sighandler );

	server.setTimeout ( 3000 );

	if ( server.openSock ( PORT ) != DSock::SUCCESS )
	{
		cout << "port " << PORT << " cannot be opened" << endl;
		cout << server.getLastError() << endl;
		return EXIT_FAILURE;
	}

	while ( loop )
	{
		if ( server.openConnection ( hSock ) != DSock::SUCCESS )
		{
			cout << "Server cannot accept new client" << endl;
			cout << server.getLastError() << endl;
			server.closeSock();
			return EXIT_FAILURE;
		}
		cout << "Client Address = " << server.getClientAddress() << endl;
		usleep ( 100000 );

		while ( errno != DSock::NO_SOCKET )
		{
			errno = server.readMessage ( hSock, buffer );
			{
				buffer = buffer.simplifyWhiteSpace();
				if ( !buffer.isEmpty() )
				{
					cout << buffer << endl;
				}
				else
				{
					cout << server.getLastError() << endl;
				}
			}
			errno = server.writeMessage( hSock, buffer );
		}
		cout << "Close client connection" << endl;
		server.closeConnection ( hSock );
	}

	server.closeSock();
	return EXIT_SUCCESS;
}
