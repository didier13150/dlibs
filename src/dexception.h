/******************************************************************************
 *      ____              ____    _       _   _                               *
 *     /# /_\_           |  _ \  (_)   __| | (_)   ___   _ __                 *
 *    |  |/o\o\          | | | | | |  / _` | | |  / _ \ | '__|                *
 *    |  \\_/_/          | |_| | | | | (_| | | | |  __/ | |                   *
 *   / |_   |            |____/  |_|  \__,_| |_|  \___| |_|                   *
 *  |  ||\_ ~|                                                                *
 *  |  ||| \/                                                                 *
 *  |  |||       Project : DLibs : usefull tools for C++ programming          *
 *  \//  |                                                                    *
 *   ||  |       Developper : Didier FABERT <didier.fabert@gmail.com>         *
 *   ||_  \      Date : 2009, April                                           *
 *   \_|  o|                                             ,__,                 *
 *    \___/      Copyright (C) 2009 by didier fabert     (oo)____             *
 *     ||||__                                            (__)    )\           *
 *     (___)_)   File : dexception.h                        ||--|| *          *
 *                                                                            *
 *   This program is free software; you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by     *
 *   the Free Software Foundation; either version 3 of the License, or        *
 *   (at your option) any later version.                                      *
 *                                                                            *
 *   This program is distributed in the hope that it will be useful,          *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *   GNU General Public License for more details.                             *
 *                                                                            *
 *   You should have received a copy of the GNU General Public License        *
 *   along with this program; if not, write to the                            *
 *   Free Software Foundation, Inc.,                                          *
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/

#ifndef DEXCEPTION_H
#define DEXCEPTION_H

#include "dstring.h"
#include <exception>

/**
 * @relates DException
 * @def DEXCEPTION_INFO
 * replace the three arguments : __FILE__, __LINE__, __FUNCTION__ \n
 * Usefull for DException declaration because it can be written like this :
 * @code
 * //DException( message, errnb, __FILE__, __LINE__, __FUNCTION__ )
 * DException( message, errnb, DEXCEPTION_INFO );
 * @endcode
 * @deprecated Use the DEXCEPTION macro instead.
 */
#define DEXCEPTION_INFO __FILE__, __LINE__, __FUNCTION__


/**
 * @relates DException
 * @def DEXCEPTION(message,errnb).\n
 * @param message ( const DString & ) the message of the exception.
 * @param errnb ( int ) The error number.
 */
#define DEXCEPTION( message, errnb ) \
	DException( message, errnb, __FILE__, __LINE__, __FUNCTION__ )
	

/**
 * @relates DException
 * @def DEXCEPTION_XML(message,errnb).\n
 * @param message ( const DString & ) the message of the exception.
 * @param errnb ( int ) The error number.
 */
#define DEXCEPTION_XML( message, errnb ) \
	DException_xml( message, errnb, __FILE__, __LINE__, __FUNCTION__ )

/**
 * @relates DException
 * @def DEXCEPTION_DB(message,errnb).\n
 * @param message ( const DString & ) the message of the exception.
 * @param errnb ( int ) The error number.
 */
#define DEXCEPTION_DB( message, errnb ) \
	DException_database( message, errnb, __FILE__, __LINE__, __FUNCTION__ )

/**
 * @relates DException
 * @def DEXCEPTION_CONNECT(message,errnb).\n
 * @param message ( const DString & ) the message of the exception.
 * @param errnb ( int ) The error number.
 */
#define DEXCEPTION_CONNECT( message, errnb ) \
	DException_connection( message, errnb, __FILE__, __LINE__, __FUNCTION__ )


/**
 * A class for manage exceptions and report a detailed explanation of why a
 * exception was thrown.\n
 * A macro is available to set easily the file name, the line number and the
 * name of the function : \p EXCEPTION_INFO defined as.\n
 * @code
 * #define DEXCEPTION_INFO __FILE__,__LINE__,__FUNCTION__
 * @endcode
 * An exception can be generated by the following code :
 * @code
 * throw DException(description, errno,  DEXCEPTION_INFO);
 * @endcode
 * And an exception can be catched and a explanation can be gotten by the
 * following code in the main program :
 * @code
 * catch (const DException& e)
 * {
 *     cerr << e.what() << endl;
 * }
 * @endcode
 * @brief Manage exception
 * @author Didier Fabert <didier.fabert@gmail.com>
 */

class DException : public std::exception
{

public:
	/**
	 * Constructor
	       * @param desc A complete description of the matter.
	       * @param errnb The error number.
	       * @param file The source file name where the exception was thrown
	       * (without any path).
	       * @param line The source file line number where the exception
	       * was thrown.
	       * @param function The function name where the exception was
	       * thrown.
	 */
	DException( const DString & desc,
	            const int errnb,
	            const DString & file,
	            const int line,
	            const DString & function ) throw()
			: _description( desc ),
			_errno( errnb ),
			_file( file ),
			_line( line ),
			_function( function ) {};

	/**
	 * Object copy
	 */
	DException( const DException &e ) throw() :
			std::exception( e ),
			_description( e._description ),
			_errno( e._errno ),
			_file( e._file ),
			_line( e._line ),
			_function( e._function ) {}

	/**
	 * Destructor
	 */
	~DException() throw() {}

	/**
	 * Object assignation
	 */
	DException & operator= ( const DException &e ) throw()
	{
		_description = e._description;
		_errno = e._errno;
		_file = e._file;
		_line = e._line;
		_function = e._function;
		return *this;
	}

	/**
	 * Return explanation of why exception was thrown.
	 */
	virtual const char* what( void ) const throw()
	{
		DString buffer, buf;

		buffer = "Error (";
		buf.setNum( _errno );
		buffer += buf;
		buffer += ") from file ";
		buf = _file;
		buffer += buf.section( "/", -1, -1 );
		buffer += " in function ";
		buffer += _function;
		buffer += " at line ";
		buf.setNum( _line );
		buffer += buf;
		buffer += " : ";
		buffer += _description;
		return buffer.c_str();
	}

protected:

	/// Description of the matter
	DString _description;
	/// The error number
	int _errno;
	/// The file where the exception was thrown
	DString _file;
	/// The line where the exception was thrown
	int _line;
	/// The function where the exception was thrown
	DString _function;
}; // class DException

/**
 * @brief Manage connection exception
 * @author Didier Fabert <didier.fabert@gmail.com>
 */
class DException_connection : public DException
{

public:
	explicit DException_connection( const DString & desc,
	                                const int errnb,
	                                const DString & file,
	                                const int line,
	                                const DString & function )
			: DException( desc, errnb, file, line, function ) {};

	~DException_connection() throw() {};
}; // class DException_connection


/**
 * @brief Manage database query exception
 * @author Didier Fabert <didier.fabert@gmail.com>
 */
class DException_database : public DException
{

public:
	explicit DException_database( const DString & desc,
	                              const int errnb,
	                              const DString & file,
	                              const int line,
	                              const DString & function )
			: DException( desc, errnb, file, line, function ) {};

	~DException_database() throw() {};
}; // class DException_database



/**
 * @brief Manage xml parsing exception
 * @author Didier Fabert <didier.fabert@gmail.com>
 */
class DException_xml : public DException
{

public:
	explicit DException_xml( const DString & desc,
	                         const int errnb,
	                         const DString & file,
	                         const int line,
	                         const DString & function )
			: DException( desc, errnb, file, line, function ) {};

	~DException_xml() throw() {};
}; // class DException_xml


/**
 * @brief Manage xml parsing exception
 * @author Didier Fabert <didier.fabert@gmail.com>
 */
class DWarningException : public DException
{

public:
	explicit DWarningException( const DString & desc,
	                            const int errnb,
	                            const DString & file,
	                            const int line,
	                            const DString & function )
			: DException( desc, errnb, file, line, function ) {};

	~DWarningException() throw() {};
	
	/**
	 * Return explanation of why exception was thrown.
	 */
	virtual const char* what( void ) const throw()
	{
		DString buffer, buf;

		buffer = "Warning (";
		buf.setNum( _errno );
		buffer += buf;
		buffer += ") from file ";
		buf = _file;
		buffer += buf.section( "/", -1, -1 );
		buffer += " in function ";
		buffer += _function;
		buffer += " at line ";
		buf.setNum( _line );
		buffer += buf;
		buffer += " : ";
		buffer += _description;
		return buffer.c_str();
	}
}; // class DWarningException

#endif // DEXCEPTION_H

